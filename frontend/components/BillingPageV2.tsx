"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { 
  Download, 
  Calendar, 
  CheckCircle, 
  XCircle, 
  Clock,
  AlertCircle,
  Crown,
  Settings,
  AlertTriangle,
  Check,
  X,
  Loader2
} from "lucide-react";
import { Button } from "./ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Separator } from "./ui/separator";
import { Alert, AlertDescription } from "./ui/alert";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "./ui/table";
import { toast } from "@/lib/toast";
import billingService, { SubscriptionData } from "@/services/billingService";
import { Plan, Invoice, PaymentMethod } from "@/types/billing";

export function BillingPageV2() {
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [subscription, setSubscription] = useState<SubscriptionData | null>(null);
  const [currentPlan, setCurrentPlan] = useState<Plan | null>(null);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [showCancelDialog, setShowCancelDialog] = useState(false);
  const [showPlanDetailDialog, setShowPlanDetailDialog] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isSyncing, setIsSyncing] = useState(false);
  
  // Âà©Áî®ÂèØËÉΩ„Å™„Éó„É©„É≥
  const availablePlans: Plan[] = [
    {
      id: 'standard',
      displayName: 'üê• „Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥',
      price: 1480,
      stripePriceId: 'price_1RnLHg1qmMqgQ3qQx3Mfo1rt',
      features: {
        maxElderlyUsers: 1,
        safetyCheckFrequency: '1Êó•1Âõû',
        notificationMethods: ['LINE', 'ÈõªË©±'],
        supportFeatures: ['ÂÆâÂê¶Á¢∫Ë™ç', 'ÈÄöË©±ÂøúÁ≠îË®òÈå≤', 'ÂÜçÈÄöÁü•'],
        targetAudience: '‰∏Ä‰∫∫ÊöÆ„Çâ„Åó„ÅÆÂÆ∂Êóè',
        maxRetryCount: 3
      }
    },
    {
      id: 'family',
      displayName: 'ü¶â „Éï„Ç°„Éü„É™„Éº„Éó„É©„É≥',
      price: 2480,
      stripePriceId: 'price_1RnLJC1qmMqgQ3qQc9t1lemY',
      features: {
        maxElderlyUsers: 3,
        safetyCheckFrequency: '1Êó•1Âõû√ó3‰∫∫ÂàÜ',
        notificationMethods: ['LINE', 'ÈõªË©±'],
        supportFeatures: ['ÂÆ∂Êóè3‰∫∫„Åæ„ÅßÁôªÈå≤ÂèØËÉΩ'],
        targetAudience: 'ÂÖÑÂºü„ÉªË¶™Â≠ê„Å™„Å©Ë§áÊï∞Ë¶ãÂÆà„Çä',
        maxRetryCount: 3
      }
    }
  ];

  // „Éá„Éº„Çø„ÅÆÂèñÂæó
  useEffect(() => {
    loadBillingData();
    
    // ÊîØÊâï„ÅÑÊàêÂäüÂæå„ÅÆÂá¶ÁêÜ
    const sessionId = searchParams.get('session_id');
    const success = searchParams.get('success');
    
    if (sessionId && success === 'true') {
      handlePaymentSuccess(sessionId);
    }
  }, [searchParams]);

  const loadBillingData = async () => {
    try {
      setLoading(true);
      
      // ‰∏¶Ë°å„Åó„Å¶„Éá„Éº„Çø„ÇíÂèñÂæó
      const [subscriptionData, invoicesData, paymentMethodsData] = await Promise.all([
        billingService.getSubscription(),
        billingService.getInvoices(10),
        billingService.getPaymentMethods()
      ]);
      
      setSubscription(subscriptionData);
      setInvoices(invoicesData);
      setPaymentMethods(paymentMethodsData);
      
      // ÁèæÂú®„ÅÆ„Éó„É©„É≥„ÇíË®≠ÂÆö
      if (subscriptionData) {
        const plan = billingService.getPlanDisplayInfo(subscriptionData.currentPlan);
        setCurrentPlan(plan || null);
      } else {
        // Ë´ãÊ±ÇÂ±•Ê≠¥„Åã„ÇâÁèæÂú®„ÅÆ„Éó„É©„É≥„ÇíÊé®Ê∏¨
        if (invoicesData.length > 0) {
          const latestInvoice = invoicesData[0];
          
          // planId„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºàÊúÄ„ÇÇÁ¢∫ÂÆüÔºâ
          if (latestInvoice.planId) {
            const plan = availablePlans.find(p => p.id === latestInvoice.planId);
            setCurrentPlan(plan || null);
          } else if (latestInvoice.priceId) {
            // ‰æ°Ê†ºID„Åã„ÇâÂà§ÂÆö
            const plan = availablePlans.find(p => p.stripePriceId === latestInvoice.priceId);
            setCurrentPlan(plan || null);
          } else if (latestInvoice.planName) {
            // „Éó„É©„É≥Âêç„ÅßÂà§ÂÆöÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
            if (latestInvoice.planName.toLowerCase().includes('standard') || 
                latestInvoice.planName.includes('„Çπ„Çø„É≥„ÉÄ„Éº„Éâ')) {
              setCurrentPlan(availablePlans.find(p => p.id === 'standard') || null);
            } else if (latestInvoice.planName.toLowerCase().includes('family') || 
                       latestInvoice.planName.includes('„Éï„Ç°„Éü„É™„Éº')) {
              setCurrentPlan(availablePlans.find(p => p.id === 'family') || null);
            }
          }
        }
      }
    } catch (error) {
      console.error('Ë´ãÊ±Ç„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      toast.error('Ë´ãÊ±Ç„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  };

  const handlePlanChange = (planId: string) => {
    console.log('„Éó„É©„É≥Â§âÊõ¥„ÇØ„É™„ÉÉ„ÇØ:', planId);
    setSelectedPlan(planId);
    setShowPlanDetailDialog(true);
  };

  const handlePaymentSuccess = async (sessionId: string) => {
    try {
      console.log('ÊîØÊâï„ÅÑÊàêÂäüÂá¶ÁêÜÈñãÂßã:', { sessionId });
      
      // apiClient„Çí‰Ωø„Å£„Å¶Ë™çË®º„Éà„Éº„ÇØ„É≥„ÇíÂê´„ÇÅ„Å¶„É™„ÇØ„Ç®„Çπ„Éà
      const { apiClient } = await import('@/services/apiClient');
      console.log('API„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂèñÂæóÂÆå‰∫Ü');
      
      const response = await apiClient.post('/billing/payment-success', { sessionId });
      
      console.log('ÊîØÊâï„ÅÑÊàêÂäüAPI„É¨„Çπ„Éù„É≥„Çπ:', {
        status: response.status,
        data: response.data,
        success: response.data?.success
      });
      
      if (response.data.success) {
        toast.success('„Éó„É©„É≥„ÅÆË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
        // „Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
        await loadBillingData();
      } else {
        // „Ç®„É©„Éº„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
        console.error('ÊîØÊâï„ÅÑÊàêÂäüÂá¶ÁêÜÂ§±Êïó:', response.data);
        toast.error(response.data.error || '„Éó„É©„É≥„ÅÆË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('ÊîØÊâï„ÅÑÊàêÂäüÂá¶ÁêÜ„Ç®„É©„Éº:', error);
      
      if (error.response?.status === 401) {
        toast.error('Ë™çË®º„Ç®„É©„Éº: „É≠„Ç∞„Ç§„É≥„ÅóÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        // Ë™çË®º„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÄÅ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
        window.location.href = '/login';
      } else {
        toast.error(error.response?.data?.error || 'ÈÄö‰ø°„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
      }
    }
  };

  const confirmPlanChange = async () => {
    if (!selectedPlan) return;
    
    const newPlan = availablePlans.find(p => p.id === selectedPlan);
    if (!newPlan) return;

    try {
      setIsProcessing(true);
      
      // „Éó„É©„É≥Â§âÊõ¥„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
      const { apiClient } = await import('@/services/apiClient');
      const validationResponse = await apiClient.post('/billing/validate-plan-change', {
        targetPlan: selectedPlan
      });
      
      if (!validationResponse.data.valid) {
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà
        toast.error(validationResponse.data.message);
        setIsProcessing(false);
        setShowPlanDetailDialog(false);
        return;
      }
      
      // ÁèæÂú®„ÅÆ„Éó„É©„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÁõ¥Êé•„Éó„É©„É≥Â§âÊõ¥„ÄÅ„Å™„ÅÑÂ†¥Âêà„ÅØÊñ∞Ë¶èÂ•ëÁ¥Ñ
      if (subscription?.id) {
        // Êó¢Â≠ò„ÅÆ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Éó„É©„É≥Â§âÊõ¥API
        await apiClient.post('/billing/change-plan', {
          targetPlan: selectedPlan
        });
        
        toast.success('„Éó„É©„É≥„ÇíÂ§âÊõ¥„Åó„Åæ„Åó„Åü');
        await loadBillingData(); // „Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
        setShowPlanDetailDialog(false);
      } else {
        // Êñ∞Ë¶èÂ•ëÁ¥Ñ„ÅÆÂ†¥Âêà„ÅØ„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà
        const checkoutUrl = await billingService.createCheckoutSession(newPlan.stripePriceId);
        window.location.href = checkoutUrl;
      }
    } catch (error: any) {
      console.error('„Éó„É©„É≥Â§âÊõ¥„Ç®„É©„Éº:', error);
      toast.error(error.response?.data?.error || '„Éó„É©„É≥Â§âÊõ¥„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCancelSubscription = async () => {
    try {
      setIsProcessing(true);
      const { apiClient } = await import('@/services/apiClient');
      
      const response = await apiClient.post('/billing/cancel');
      
      if (response.data.success) {
        toast.success('„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅÆ„Ç≠„É£„É≥„Çª„É´„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü');
        // „Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø
        await loadBillingData();
        setShowCancelDialog(false);
      } else {
        toast.error(response.data.error || '„Ç≠„É£„É≥„Çª„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('„Ç≠„É£„É≥„Çª„É´„Ç®„É©„Éº:', error);
      toast.error(error.response?.data?.error || '„Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDownloadInvoice = (downloadUrl?: string) => {
    if (!downloadUrl) {
      toast.error('Ë´ãÊ±ÇÊõ∏„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâURL„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }
    window.open(downloadUrl, '_blank');
    toast.success('Ë´ãÊ±ÇÊõ∏„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü');
  };

  const handleSyncSubscription = async () => {
    try {
      setIsSyncing(true);
      const { apiClient } = await import('@/services/apiClient');
      const response = await apiClient.post('/test/sync-stripe-subscription');
      
      if (response.data.success) {
        toast.success('„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÂêåÊúü„Åó„Åæ„Åó„Åü');
        // „Éá„Éº„Çø„ÇíÂÜçÂèñÂæó
        await loadBillingData();
      } else {
        toast.error(response.data.message || '„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅÆÂêåÊúü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('ÂêåÊúü„Ç®„É©„Éº:', error);
      const message = error.response?.data?.message || '„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅÆÂêåÊúü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
      toast.error(message);
    } finally {
      setIsSyncing(false);
    }
  };

  const getPlanBadgeColor = (planId: string) => {
    switch (planId) {
      case 'standard': return 'bg-blue-100 text-blue-700';
      case 'family': return 'bg-purple-100 text-purple-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const getStatusIcon = (status: Invoice['status']) => {
    switch (status) {
      case 'paid': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'pending': return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'failed': return <XCircle className="w-4 h-4 text-red-600" />;
      default: return <AlertCircle className="w-4 h-4 text-gray-600" />;
    }
  };
  
  const getStatusLabel = (status: Invoice['status']) => {
    switch (status) {
      case 'paid': return 'ÊîØÊâïÊ∏à„Åø';
      case 'pending': return 'ÊîØÊâïÂæÖ„Å°';
      case 'failed': return 'ÊîØÊâïÂ§±Êïó';
      default: return '‰∏çÊòé';
    }
  };
  
  const getStatusColor = (status: Invoice['status']) => {
    switch (status) {
      case 'paid': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // „Éó„É©„É≥Ë©≥Á¥∞
  const getPlanDetails = (planId: string) => {
    const planFeatures = {
      standard: {
        features: [
          'ÁôªÈå≤ËÄÖÊï∞: 1‰∫∫',
          '1Êó•1Âõû„ÅÆÂÆâÂê¶Á¢∫Ë™ç',
          'ÈõªË©±ÔºãLINEÂØæÂøú',
          'ÂÜçÈÄöÁü•: 3Âõû„Åæ„Åß',
          'ÈÄöÁü•ÈñìÈöî: 30ÂàÜ/1ÊôÇÈñì',
          'ÈÄöË©±ÂøúÁ≠îË®òÈå≤',
          '„É°„Éº„É´ÈÄöÁü•'
        ],
        limitations: [
          'Ë§áÊï∞‰∫∫„ÅÆÁôªÈå≤‰∏çÂèØ'
        ],
        bestFor: '‰∏Ä‰∫∫ÊöÆ„Çâ„Åó„ÅÆÂÆ∂Êóè„ÅÆË¶ãÂÆà„Çä„Å´ÊúÄÈÅ©'
      },
      family: {
        features: [
          'ÁôªÈå≤ËÄÖÊï∞: ÊúÄÂ§ß3‰∫∫',
          '1Êó•1Âõû√ó3‰∫∫ÂàÜ„ÅÆÂÆâÂê¶Á¢∫Ë™ç',
          'ÈõªË©±ÔºãLINEÂØæÂøú',
          'ÂÜçÈÄöÁü•: 3Âõû„Åæ„Åß',
          'ÈÄöÁü•ÈñìÈöî: 30ÂàÜ/1ÊôÇÈñì',
          'ÈÄöË©±ÂøúÁ≠îË®òÈå≤',
          '„É°„Éº„É´ÈÄöÁü•',
          'ÂÑ™ÂÖà„Çµ„Éù„Éº„Éà',
          'Ë©≥Á¥∞ÂàÜÊûêÊ©üËÉΩ'
        ],
        limitations: [],
        bestFor: 'ÂÖÑÂºü„ÉªË¶™Â≠ê„Å™„Å©Ë§áÊï∞‰∫∫„ÅÆË¶ãÂÆà„Çä„Å´ÊúÄÈÅ©'
      }
    };

    return planFeatures[planId as keyof typeof planFeatures] || planFeatures.standard;
  };

  const selectedPlanData = selectedPlan ? availablePlans.find(p => p.id === selectedPlan) : null;
  const selectedPlanDetails = selectedPlan ? getPlanDetails(selectedPlan) : null;

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-8 h-8 animate-spin text-gray-500" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* ÁèæÂú®„ÅÆ„Éó„É©„É≥ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Crown className="w-5 h-5 text-blue-600" />
            ÁèæÂú®„ÅÆ„Éó„É©„É≥
          </CardTitle>
          <CardDescription>
            „ÅîÂ•ëÁ¥Ñ‰∏≠„ÅÆ„Éó„É©„É≥ÊÉÖÂ†±
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {currentPlan ? (
            <>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Badge className={getPlanBadgeColor(currentPlan.id)}>
                    {currentPlan.displayName}
                  </Badge>
                  <div>
                    <p className="font-medium text-gray-900">
                      ÊúàÈ°ç ¬•{currentPlan.price.toLocaleString()}
                    </p>
                    {subscription?.nextBillingDate && (
                      <p className="text-sm text-gray-500">
                        Ê¨°ÂõûË´ãÊ±ÇÊó•: {new Date(subscription.nextBillingDate).toLocaleDateString('ja-JP')}
                      </p>
                    )}
                  </div>
                </div>
                <div className="flex gap-2">
                  {currentPlan.id === 'standard' && (
                    <Button 
                      variant="default" 
                      size="sm"
                      onClick={() => handlePlanChange('family')}
                    >
                      „Éï„Ç°„Éü„É™„Éº„Éó„É©„É≥„Å´„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                    </Button>
                  )}
                </div>
              </div>

              <Separator />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-900">„Éó„É©„É≥ÁâπÂÖ∏</h4>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ ÊúÄÂ§ß {currentPlan.features.maxElderlyUsers} ‰∫∫„Åæ„ÅßÁôªÈå≤ÂèØËÉΩ</li>
                    <li>‚Ä¢ {currentPlan.features.safetyCheckFrequency}</li>
                    <li>‚Ä¢ ÂÜçÈÄöÁü• {currentPlan.features.maxRetryCount} Âõû„Åæ„Åß</li>
                    {currentPlan.features.supportFeatures.map((feature, index) => (
                      <li key={index}>‚Ä¢ {feature}</li>
                    ))}
                  </ul>
                </div>
                {subscription && (
                  <div className="space-y-2">
                    <h4 className="font-medium text-gray-900">Â•ëÁ¥ÑÊÉÖÂ†±</h4>
                    <div className="text-sm text-gray-600 space-y-1">
                      <p>Â•ëÁ¥ÑÈñãÂßãÊó•: {new Date(subscription.startDate).toLocaleDateString('ja-JP')}</p>
                      <p>„Çπ„ÉÜ„Éº„Çø„Çπ: <span className={subscription.cancelAtPeriodEnd ? 'text-orange-600' : subscription.status === 'active' ? 'text-green-600' : 'text-red-600'}>
                        {subscription.cancelAtPeriodEnd ? '„Ç≠„É£„É≥„Çª„É´‰∫àÂÆö' : subscription.status === 'active' ? '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ' : '„Ç≠„É£„É≥„Çª„É´Ê∏à„Åø'}
                      </span></p>
                      {subscription.cancelAtPeriodEnd && subscription.nextBillingDate && (
                        <p className="text-orange-600 font-medium">
                          {new Date(subscription.nextBillingDate).toLocaleDateString('ja-JP')} „Å´„Çµ„Éº„Éì„ÇπÁµÇ‰∫Ü
                        </p>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </>
          ) : (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                ÁèæÂú®ÊúâÂäπ„Å™„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Éó„É©„É≥„ÇíÈÅ∏Êäû„Åó„Å¶Â•ëÁ¥Ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Ë´ãÊ±ÇÂ±•Ê≠¥ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            Ë´ãÊ±ÇÂ±•Ê≠¥
          </CardTitle>
          <CardDescription>
            ÈÅéÂéª„ÅÆË´ãÊ±ÇÊõ∏„Å®ÊîØÊâï„ÅÑÁä∂Ê≥Å
          </CardDescription>
        </CardHeader>
        <CardContent>
          {invoices.length > 0 ? (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Ë´ãÊ±ÇÊõ∏Áï™Âè∑</TableHead>
                    <TableHead>Êó•‰ªò</TableHead>
                    <TableHead>„Éó„É©„É≥</TableHead>
                    <TableHead>ÈáëÈ°ç</TableHead>
                    <TableHead>„Çπ„ÉÜ„Éº„Çø„Çπ</TableHead>
                    <TableHead>ÊîØÊâï„ÅÑÊñπÊ≥ï</TableHead>
                    <TableHead>„Ç¢„ÇØ„Ç∑„Éß„É≥</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {invoices.map((invoice) => (
                    <TableRow key={invoice.id}>
                      <TableCell className="font-medium">
                        {invoice.invoiceNumber || '-'}
                      </TableCell>
                      <TableCell>
                        {new Date(invoice.date).toLocaleDateString('ja-JP')}
                      </TableCell>
                      <TableCell>
                        {invoice.planName}
                      </TableCell>
                      <TableCell>
                        ¬•{invoice.amount.toLocaleString()}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {getStatusIcon(invoice.status)}
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(invoice.status)}`}>
                            {getStatusLabel(invoice.status)}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        {invoice.paymentMethod?.type === 'card' && invoice.paymentMethod.last4 ? (
                          <span>
                            {invoice.paymentMethod.brand} ****{invoice.paymentMethod.last4}
                          </span>
                        ) : (
                          '„Ç´„Éº„Éâ'
                        )}
                      </TableCell>
                      <TableCell>
                        {invoice.downloadUrl && (
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => handleDownloadInvoice(invoice.downloadUrl)}
                          >
                            <Download className="w-4 h-4 mr-2" />
                            „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                          </Button>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              Ë´ãÊ±ÇÂ±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì
            </div>
          )}
        </CardContent>
      </Card>

      {/* „Éó„É©„É≥Â§âÊõ¥„ÉªÂ•ëÁ¥ÑÁÆ°ÁêÜ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="w-5 h-5" />
              „Éó„É©„É≥Â§âÊõ¥
            </CardTitle>
            <CardDescription>
              „Çà„ÇäÂ§ö„Åè„ÅÆÊ©üËÉΩ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {availablePlans.map((plan) => {
              const isCurrentPlan = currentPlan && plan.id === currentPlan.id;
              return (
                <div key={plan.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div>
                    <div className="flex items-center gap-2">
                      <h4 className="font-medium text-gray-900">{plan.displayName}</h4>
                      {plan.id === 'family' && <Badge variant="secondary">‰∫∫Ê∞ó</Badge>}
                      {isCurrentPlan && <Badge>ÁèæÂú®„ÅÆ„Éó„É©„É≥</Badge>}
                    </div>
                    <p className="text-sm text-gray-500">¬•{plan.price.toLocaleString()}/Êúà</p>
                  </div>
                  <Button 
                    variant={isCurrentPlan ? "secondary" : "default"}
                    size="sm"
                    disabled={!!isCurrentPlan}
                    onClick={() => handlePlanChange(plan.id)}
                  >
                    {isCurrentPlan ? "ÁèæÂú®„ÅÆ„Éó„É©„É≥" : "Ë©≥Á¥∞„ÇíË¶ã„Çã"}
                  </Button>
                </div>
              );
            })}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="w-5 h-5 text-red-600" />
              Â•ëÁ¥ÑÁÆ°ÁêÜ
            </CardTitle>
            <CardDescription>
              Â•ëÁ¥Ñ„ÅÆ‰∏ÄÊôÇÂÅúÊ≠¢„ÇÑ„Ç≠„É£„É≥„Çª„É´
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {subscription?.cancelAtPeriodEnd ? (
              <Alert className="border-red-200 bg-red-50">
                <AlertCircle className="h-4 w-4 text-red-600" />
                <AlertDescription className="text-red-800">
                  {subscription.nextBillingDate && (
                    <>
                      „Ç≠„É£„É≥„Çª„É´Ê∏à„Åø: {new Date(subscription.nextBillingDate).toLocaleDateString('ja-JP')} „Åæ„ÅßÂà©Áî®ÂèØËÉΩ„Åß„Åô
                    </>
                  )}
                </AlertDescription>
              </Alert>
            ) : (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  „Ç≠„É£„É≥„Çª„É´Âæå„ÇÇÁèæÂú®„ÅÆË´ãÊ±ÇÊúüÈñìÁµÇ‰∫Ü„Åæ„Åß„Çµ„Éº„Éì„Çπ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô
                </AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              {subscription?.cancelAtPeriodEnd ? (
                <Button 
                  variant="secondary" 
                  className="w-full"
                  disabled
                >
                  „Ç≠„É£„É≥„Çª„É´Ê∏à„Åø
                </Button>
              ) : (
                <Button 
                  variant="destructive" 
                  className="w-full"
                  onClick={() => setShowCancelDialog(true)}
                  disabled={!subscription || subscription.status !== 'active'}
                >
                  Â•ëÁ¥Ñ„Çí„Ç≠„É£„É≥„Çª„É´
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* „Ç≠„É£„É≥„Çª„É´Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog open={showCancelDialog} onOpenChange={setShowCancelDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Â•ëÁ¥Ñ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åô„ÅãÔºü</DialogTitle>
            <DialogDescription>
              {subscription?.nextBillingDate && (
                <div className="space-y-2">
                  <p>„Ç≠„É£„É≥„Çª„É´„Åó„Å¶„ÇÇ„ÄÅ‰ª•‰∏ã„ÅÆÊó•‰ªò„Åæ„ÅßÂºï„ÅçÁ∂ö„Åç„Çµ„Éº„Éì„Çπ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„ÅôÔºö</p>
                  <p className="font-semibold text-lg">
                    {new Date(subscription.nextBillingDate).toLocaleDateString('ja-JP', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}„Åæ„Åß
                  </p>
                  <p className="text-sm text-gray-600">
                    ‰∏äË®ò„ÅÆÊó•‰ªò‰ª•Èôç„ÄÅËá™ÂãïÁöÑ„Å´„Çµ„Éº„Éì„Çπ„ÅåÂÅúÊ≠¢„Åï„Çå„ÄÅÊ¨°Âõû„ÅÆË´ãÊ±Ç„ÅØÁô∫Áîü„Åó„Åæ„Åõ„Çì„ÄÇ
                  </p>
                </div>
              )}
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => setShowCancelDialog(false)}>
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleCancelSubscription}
              disabled={isProcessing}
            >
              {isProcessing ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Âá¶ÁêÜ‰∏≠...
                </>
              ) : (
                'Â•ëÁ¥Ñ„Çí„Ç≠„É£„É≥„Çª„É´'
              )}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* „Éó„É©„É≥Ë©≥Á¥∞„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog open={showPlanDetailDialog} onOpenChange={(open) => {
        console.log('„ÉÄ„Ç§„Ç¢„É≠„Ç∞Áä∂ÊÖãÂ§âÊõ¥:', open);
        setShowPlanDetailDialog(open);
      }}>
        <DialogContent className="max-w-2xl bg-white">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {selectedPlanData && (
                <>
                  <Badge className={getPlanBadgeColor(selectedPlanData.id)}>
                    {selectedPlanData.displayName}
                  </Badge>
                  <span>„Éó„É©„É≥Ë©≥Á¥∞</span>
                </>
              )}
            </DialogTitle>
            <DialogDescription>
              {selectedPlanData && (
                <div className="flex items-center gap-2 mt-2">
                  <span className="text-2xl font-bold text-gray-900">
                    ¬•{selectedPlanData.price.toLocaleString()}
                  </span>
                  <span className="text-gray-500">/Êúà</span>
                  {selectedPlanData.id === 'family' && (
                    <Badge variant="secondary" className="ml-2">‰∫∫Ê∞ó„Éó„É©„É≥</Badge>
                  )}
                </div>
              )}
            </DialogDescription>
          </DialogHeader>
          
          {selectedPlanDetails && (
            <div className="space-y-6">
              {/* ÊúÄÈÅ©„Å™Áî®ÈÄî */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">„Åì„Çì„Å™Êñπ„Å´„Åä„Åô„Åô„ÇÅ</h4>
                <p className="text-blue-800 text-sm">{selectedPlanDetails.bestFor}</p>
              </div>

              {/* Ê©üËÉΩ‰∏ÄË¶ß */}
              <div className="bg-green-50 p-4 rounded-lg">
                <h4 className="font-medium text-green-900 mb-3 flex items-center gap-2">
                  <Check className="w-5 h-5" />
                  Âê´„Åæ„Çå„ÇãÊ©üËÉΩ
                </h4>
                <div className="space-y-2">
                  {selectedPlanDetails.features.map((feature, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <Check className="w-4 h-4 text-green-600 flex-shrink-0 mt-0.5" />
                      <span className="text-sm text-gray-700">{feature}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Âà∂Èôê‰∫ãÈ†Ö */}
              {selectedPlanDetails.limitations.length > 0 && (
                <div className="bg-red-50 p-4 rounded-lg">
                  <h4 className="font-medium text-red-900 mb-3 flex items-center gap-2">
                    <X className="w-5 h-5" />
                    Âà∂Èôê‰∫ãÈ†Ö
                  </h4>
                  <div className="space-y-2">
                    {selectedPlanDetails.limitations.map((limitation, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <X className="w-4 h-4 text-red-500 flex-shrink-0 mt-0.5" />
                        <span className="text-sm text-gray-600">{limitation}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ÁèæÂú®„ÅÆ„Éó„É©„É≥„Å®„ÅÆÊØîËºÉ */}
              {currentPlan && selectedPlan !== currentPlan.id && (
                <div className="border-t pt-4">
                  <h4 className="font-medium text-gray-900 mb-2">ÁèæÂú®„ÅÆ„Éó„É©„É≥„Å®„ÅÆÊØîËºÉ</h4>
                  <div className="bg-gray-50 p-3 rounded-lg text-sm">
                    <p className="text-gray-600">
                      ÁèæÂú®: {currentPlan.displayName} (¬•{currentPlan.price.toLocaleString()}/Êúà)
                      ‚Üí {selectedPlanData?.displayName} (¬•{selectedPlanData?.price.toLocaleString()}/Êúà)
                    </p>
                    {selectedPlanData && (
                      <p className="text-gray-600 mt-1">
                        ÊúàÈ°çÂ∑ÆÈ°ç: {selectedPlanData.price > currentPlan.price ? '+' : ''}
                        ¬•{(selectedPlanData.price - currentPlan.price).toLocaleString()}
                      </p>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}

          <div className="flex justify-end gap-2 pt-4">
            <Button variant="outline" onClick={() => setShowPlanDetailDialog(false)}>
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            {currentPlan && selectedPlan !== currentPlan.id && (
              <Button onClick={confirmPlanChange} disabled={isProcessing}>
                {isProcessing ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Âá¶ÁêÜ‰∏≠...
                  </>
                ) : (
                  '„Åì„ÅÆ„Éó„É©„É≥„Å´Â§âÊõ¥'
                )}
              </Button>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}